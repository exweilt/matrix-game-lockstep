// MatrixGame - SR2 Planetary battles engine
// Copyright (C) 2012, Elemental Games, Katauri Interactive, CHK-Games
// Licensed under GPLv2 or any later version
// Refer to the LICENSE file included

#pragma once

#include "MatrixGameDll.hpp"

#include "CHeap.hpp"
#include "CBlockPar.hpp"

class CFormMatrixGame;
class CMatrixMapLogic;
class CIFaceList;
class CRenderPipeline;
class CLoadProgress;
class CHistory;
struct SMenuItemText;

extern Base::CHeap *g_MatrixHeap;
extern Base::CBlockPar *g_MatrixData;
extern CMatrixMapLogic *g_MatrixMap;
extern CIFaceList *g_IFaceList;
extern CRenderPipeline *g_Render;
extern CLoadProgress *g_LoadProgress;
extern SMenuItemText *g_PopupHead;
extern SMenuItemText *g_PopupWeaponNormal;
extern SMenuItemText *g_PopupWeaponExtern;
extern SMenuItemText *g_PopupHull;
extern SMenuItemText *g_PopupChassis;
extern CHistory *g_ConfigHistory;

/**
 * @brief Stateless class, which only holds functions, but no data responsive for game engine operation: start, run,
 * end.
 *
 * TODO: It is similar to a "static class" or a namespace. Consider bringing it to a more logical form, maybe rename,
 *      maybe move global variables inside as members.
 */
class CGame {
public:
    CGame() = delete;
    ~CGame() = delete;

    /**
     * @brief Initializes the game engine.
     *
     * Initializes statics, loads .pkg and .dat files, initializes 3D rendering engine,
     * initializes rendering pipeline, loads map, applies video settings, loads interface.
     *
     * BUILD_EXE environment variable determines whether to initialize as a standalone executable or as DLL.
     *
     * @param inst Windows process handle.
     * @param wnd Windows' window handle. Basically an id to the window to draw.
     * @param map Requested map name to play. The file is either located inside the .pkg file or at "Matrix/Map/"
     *              and could be something like "desert1_3e.cmap"
     * @param seed u32 seed for PRNG.
     * @param provided_settings Optional pointer to SRobotsSettings structure object. If not specified the settings will be autogenerated.
     * @param lang Specify only for DLL: it is usually "rus" or "eng".
     * @param txt_start Optional: Text displayed at the start of the map.
     * @param txt_win Optional: Text displayed at the end of the map, if you win.
     * @param txt_loss Optional: Text displayed at the end of the map, if you lose.
     * @param planet Optional: Planet name.
     */
    static void Init(
        HINSTANCE hInstance,
        HWND wnd,
        const wchar *map = nullptr,
        uint32_t seed = 0,
        const SRobotsSettings *provided_settings = nullptr,
        const wchar *lang = nullptr,
        const wchar *txt_start = nullptr,
        const wchar *txt_win = nullptr,
        const wchar *txt_loss = nullptr,
        const wchar *planet = nullptr
    );
    static void Deinit();
    static void SafeFree();

    /**
     * @brief An envelope over L3GRun() function to account for DLL multiple windows form change.
     *
     * @param formGame The form(i.e. Window) of the game.
     */
    static void RunGameLoop(CFormMatrixGame *formGame);
    static void SaveResult(SRobotGameState *state);

private:
    static void ApplyVideoParams(SRobotsSettings &settings);
};
